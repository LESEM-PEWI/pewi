var global = [        {}    ],    SCREEN = {    };(function ($) {    go = function () {        $("button").button();        // Finite State Machine http://lamehacks.net/blog/implementing-a-state-machine-in-javascript/        global.watershedPercent = [];        var states = [            {                'name': 'splash-view',                'initial': true,                'events': {                    'goto-mainevent': 'mainevent-view'                }            },            {                'name': 'mainevent-view',                'events': {                    'goto-layer': 'layer-view',                    'goto-nextyear': 'timelapse-view',                    'goto-restart': 'restart-view',                    'goto-print': 'print-view',                    'goto-popup': 'popup-view'                }            },            {                'name': 'layer-view',                'events': {                    'goto-mainevent': 'mainevent-view',                    'goto-popup': 'popup-view'                }            },            {                'name': 'popup-view',                'events': {                    'goto-mainevent': 'mainevent-view',                    'goto-new-dataset': 'new-dataset-view'                }            },            {                'name': 'restart-view',                'events': {                    'goto-mainevent': 'mainevent-view'                }            },            {                'name': 'print-view',                'event': {                    'goto-mainevent': 'mainevent-view'                }            },            {                'name': 'timelapse-view',                'events': {                    'goto-mainevent': 'mainevent-view'                }            },            {                name: 'new-dataset-view',                events: {                    'goto-splashscreen': 'splash-view',                    'goto-mainevent': 'mainevent-view'                }            }        ];        function StateMachine(states) {            this.goto = {                SPLASH: 'goto-splashscreen',                MAIN: 'goto-mainevent',                POPUP: 'goto-popup',                RESTART: 'goto-restart',                PRINT: 'goto-print',                NEXTYEAR: 'goto-nextyear',                NEW_DATASET: 'goto-new-dataset'            };            this.states = states;            this.indexes = {};            for (var i = 0; i < this.states.length; i++) {                this.indexes[this.states[i].name] = i;                if (this.states[i].initial) {                    this.currentState = this.states[i];                }            }            this.consumeEvent = function (e) {                if (this.currentState.events[e]) {                    this.currentState = this.states[this.indexes[this.currentState.events[e]]];                    console.log(this.currentState.name);                    this.bind();                }            }            this.bind = function () {                bindInteractions(this.currentState.name);            }            this.getStatus = function () {                return this.currentState.name;            }            function bindInteractions(state) {                switch (state) {                    case 'splash-view':                        splashInteractions();                        break;                    case 'mainevent-view':                        maineventInteractions();                        break;                    case 'layer-view':                        layerInteractions();                        break;                    case 'popup-view':                        popupInteractions();                        break;                    case 'restart-view':                        restartInteractions();                        break;                    case 'print-view':                        printInteractions();                        break;                    case 'timelapse-view':                        timelapseInteractions();                        break;                    case 'new-dataset-view':                        newDatasetInteractions();                        break;                    default:                        console.log("I am really confused about the state of my being right now");                }                function splashInteractions() {                    /*                     * Transitions                     */                    setBackgroundImage($("#splash-screen"));                    displayLoadingLayer($("#splash-screen"));                    // Start preloading PEWI                    copyBackgroundImage($("body"));                    $("#main").show();                    $("#watershed").show();                    var scale = Math.round(SCREEN.height / 36 / 2 - 1);                    var options = {                        parent: "#divcontainer",                        landcover: global.data[global.year].baselandcover.data,                        y: global.data[global.year].row.data,                        x: global.data[global.year].column.data,                        width: 23 * 3 * scale + 3 * scale,                        height: 36 * 2 * scale,                        rectWidth: 3 * scale,                        rectHeight: 2 * scale                    };                    global.maps = new Maps();                    global.maps.watershed(options);                    //updateTable(global.data[global.year].baselandcover,$("#watershed td"));                    //$("#toolbar").show();                    $(".rounds").show();                    //$("#landcover-toolbar").show();                    $("#info").show();                    resizeBackgroundImage();                    centerElement($(window), $("#watershed"));                    global.update = true;                    global.sm.consumeEvent(global.sm.goto.MAIN);                }                var riverUpdate;                function maineventInteractions() {                    /*                     * Transitions                     *///                    displayFadeInfoBox("The Watershed");                    //$("#watershed td").on("click");                    $("#selectable-paint td").bind("click");                    //riverUpdate = setInterval(function(){updateRiver()},1000);                    //$("#watershed").selectable("enable");                    hideMiniMap();                    clearOtherPopups(0);                    if ($("#popup-overlay").is(":visible")) {                        $("#popup-overlay").hide();                    }                    updateHud();                    if (global.outputmap != undefined) {                        global.outputmap.dealloc();                    }                }                function layerInteractions() {                    //riverUpdate = clearInterval(riverUpdate);                    //$("#watershed td").unbind("click");                    $("#watershed").selectable("disable");                    $("#selectable-paint td").unbind("click");                    displayMiniMap();                    if ($("#popup-overlay").is(":visible")) {                        $("#popup-overlay").hide();                    }                }                function popupInteractions() {                    clearInterval(riverUpdate);                    //$("#watershed td").off("click");                    //$("#watershed td").unbind("mouseenter mouseleave MouseWheelHandler");                    //$("#watershed").selectable("destroy");                    $("#selectable-paint td").unbind("click");                    if ($("#popup-overlay").is(":visible") == false) {                        $("#popup-overlay").show();                    }                }                function restartInteractions() {                    clearInterval(riverUpdate);                    //$("#watershed td").unbind("mouseenter mouseleave MouseWheelHandler");                    //$("#watershed").selectable("destroy");                    $("#selectable-paint td").unbind("click");                }                function printInteractions() {                    clearInterval(riverUpdate);                    //$("#watershed td").unbind("mouseenter mouseleave MouseWheelHandler");                    //$("#watershed").selectable("destroy");                    global.scoreDirector = new ScoreDirector();                    global.scoreDirector.update();                    var print = new PrintView();                    $("#fact-sheet").show("slide", {direction: "right"}, 500);                }                function timelapseInteractions() {                    setBackgroundImage($("#nextyear-screen"));                    $("#nextyear-screen").show();                    displayLoadingLayer($("#nextyear-screen"));                    clearInterval(riverUpdate);                    // This check moves the watershed forward/back a year.                    // The following checks assume that the user is not                    // trying to move forward/backward 2+ years.                    // Start preloading PEWI                    copyBackgroundImage($("body"));//                    updateTable(global.data[global.year].baselandcover, $("#watershed td"));                    var options = {                        landcover: global.data[global.year].baselandcover.data                    };                    global.maps.updateWatershed(options);                    resizeBackgroundImage();//                    centerElement($(window), $("#watershed"));                    if (global.previousyear != undefined && global.update) {                        var year = global.year;                        global.year = global.previousyear;                        global.scoreDirector = new ScoreDirector();                        global.scoreDirector.update();                        global.plot.rounds = global.year;                        if (global.plot) {                            global.plot.update();                        }                        global.year = year;                    }                    global.update = true;                    updateHud();                }                function newDatasetInteractions() {                    closeAllRemovableDisplays();                    d3.selectAll('svg').remove();                    $('#splash-screen').show();                    global.sm.consumeEvent(global.sm.goto.SPLASH);                }            }        }        function init() {            global.compatibility = browserChecks();            if (global.compatibility.svg) {                SCREEN = {                    width: $(document).width(),                    height: $(document).height()                };                global.year = 1;                global.data = {                    1: 0,                    2: 0,                    3: 0,                    is_dataset_for_pewi: true                };                global.data[global.year] = Data;                        global.precipitation = {                    0: 0,                    1: 0,                    2: 0,                    3: 0                };                    global.r = {                    0: 0,                    1: 0,                    2: 0                };                global.subwatershedArea = false;                    global.streamIndices = {                    1: [],                    2: [],                    3: []                };                global.mapCellWidth = 3;                global.mapCellHeight = 2;                global.landuse = {};                global.aveSedimentDelivered = {};                global.sedimentDelivered = {};                global.grossErosion = {};                global.phosphorusLoad = {};                global.results = {                    1: {},                    2: {},                    3: {}                };                    global.landcovers = {                    1: {},                    2: {},                    3: {}                };                    for(var year in global.precipitation) {                    setPrecipitation(year);                }                global.sm = new StateMachine(states);                global.sm.bind();                global.plot = new Plot();                global.undo = [];                var $main = $('#main');                $main.append('<img src="images/icons/navigation/credits_button.svg" class="credits-button-img" alt="i">');                $main.append('<a id="version-tag">BETA</a>');                $(".credits-button-img").show("fade");                if(global.compatibility.file_api) addDownloadUploadButton($main);            } else {                var $body = $("body");                $body.empty();                $body.append('<div id="broken-container"><div><strong><a>ERROR.. Something went wrong!</strong><br />Please make sure your browser is fully updated, or use a browser such as Google Chrome or Mozilla Firefox</a></div><img id="broken-page-image" src="images/icons/broken.png"></div>');                $body.css("marginLeft", parseFloat(($(window).width())/2) - (parseFloat($("#broken-container").width())/2))                .css("marginTop", parseFloat(($(window).height())/2) - (parseFloat($("#broken-container").height())/2));            }        }        function browserChecks() {            return {                svg: supportsSVG(),                file_api: supportsFileAPI(),                download_attr: supportsDownloadAttribute()            };        }                function supportsSVG() {            return document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1");            //return !(!!document.createElementNS && !!document.createElementNS("http://www.w3.org/2000/svg", "svg").creatSVGRect);        }        function supportsFileAPI() {            return (window.File && window.FileReader && window.FileList && window.Blob) ? true : false;        }        function supportsDownloadAttribute() {            return true;        }        function addDownloadUploadButton($container) {            $container.append('<a id="download-upload-button">&#8595;</a>');            $("#download-upload-button").click(function() {                global.sm.consumeEvent(global.sm.goto.POPUP);                var options = {                    width: SCREEN.width / 2,                    title: "Download Upload DataSets"                };                global.popup = new ModalView(options);                global.popup.append('<p>Upload dataset</p>');                global.popup.append('<div><div id="file-upload-dropzone">Drop files here</div>')                global.popup.append('<input type="file" id="file-upload" name="files[]" /><output id="file-upload-list"></output></div>')                global.popup.append('<p>Download dataset</p>')                global.popup.append('<a href="data:application/json;charset=utf-8, ' + getJSONData() + '" download="pewi_data.json">Download the pewi dataset</a>')                //global.popup.append('<input type="button" id="file-download-button" value="Download Dataset"/> ')                global.popup.display();                ////////////////////////////////////////////                /////////// Upload /////////////////////////                ////////////////////////////////////////////                $('#file-upload').on('change', function(e) {                    var files = e.target.files;                    processFileUpload(files);                });                $('#file-upload-dropzone').on('drop', function(e) {                    var files;                    if(e.originalEvent.dataTransfer) {                        if(e.originalEvent.dataTransfer.files.length) {                            e.preventDefault();                            e.stopPropagation();                            files = e.originalEvent.dataTransfer.files;                            processFileUpload(files);                        }                    }                    console.log(files);                }).on('dragover', function(e) {                    e.preventDefault();                    e.stopPropagation();                    if(e.originalEvent.dataTransfer.dropEffect) {                        e.originalEvent.dataTransfer.dropEffect = 'copy';                    }                    $(this).css('background-color', 'rgba(200, 200, 200, 1)')                }).on('dragenter', function(e) {                    e.preventDefault();                    e.stopPropagation();                }).on('dragleave', function(e) {                    $(this).css('background-color', 'rgba(255, 255, 255, 1)')                });                function processFileUpload(files) {                    console.log(files[0]);                    if(!files[0].type.match(/application\/json/)) {                        return;                    }                    var reader = new FileReader();                    console.log(reader);                    reader.onload = function(e) {                        parseUploadedJSONData(reader.result);                        global.popup.append('<p>Confirm reload using new dataset: <input id="update-pewi-with-new-dataset-button" type="button" value="Yes" /><br /><a>Warning, this will erase your current progress!</a></h2></p>');                        $('#update-pewi-with-new-dataset-button').click(function(e) {                            global.year = 1;                            global.sm.consumeEvent(global.sm.goto.NEW_DATASET);                        });                    }                    reader.readAsText(files[0]);//                    reader.readAsBinaryString(files[0]);                }                function parseUploadedJSONData(json) {                    var object = JSON.parse(json);                    if(object.is_dataset_for_pewi) {                        global.data = object;                        console.log(global.data);                    }                }                /////////////////////////////////////////////////                ///////////////// Download //////////////////////                /////////////////////////////////////////////////                function getJSONData() {                    var json = JSON.stringify(global.data);                    return encodeURIComponent(json);                }                $('#file-download-button').click(function(e) {//                    console.log(JSON.stringify(global.data));                    var json = JSON.stringify(global.data);                    var object = JSON.parse(json);                    console.log(object);                });            });        }        var streamAnimationStartIndex = [214, 217, 243, 384, 423];        var streamAnimationCurrentIndex = [214, 217, 243, 384, 423];        var streamAnimationIndices = [];        var j = 1, nextIndex = [0, 0, 0, 0, 0];        function updateRiver() {            function animate() {            }            for (var i = 0; i < /*streamAnimationStartIndex.length*/5; i++) {                if (streamAnimationCurrentIndex[i] != streamAnimationStartIndex[i]) {                    $("#watershed td").eq(streamAnimationCurrentIndex[i] - nextIndex[i]).css("opacity", "1.0");                } else {                    $("#watershed td").eq(823).css("opacity", "1.0");                }                $("#watershed td").eq(streamAnimationCurrentIndex[i]).css("opacity", "0.7");                if (pewiData[0][1 + streamAnimationCurrentIndex[i] - 1] == 0) {                    // Cell to the left                    nextIndex[i] = -1;                }                if (pewiData[0][1 + streamAnimationCurrentIndex[i] + 22] == 0) {                    // Cell below & to the left                    nextIndex[i] = 22;                }                if (pewiData[0][1 + streamAnimationCurrentIndex[i] + 24] == 0) {                    // Cell below & to the right                    nextIndex[i] = 24;                }                if (pewiData[0][1 + streamAnimationCurrentIndex[i] + 1] == 0) {                    // Cell to the right                    nextIndex[i] = 1;                }                if (pewiData[0][1 + streamAnimationCurrentIndex[i] + 23] == 0) {                    // Cell directly below                    nextIndex[i] = 23;                }                if (streamAnimationCurrentIndex[i] === 288) {                    // Special case for the third stream                    nextIndex[i] = 22;                }                if (streamAnimationCurrentIndex[i] === 823) {                    streamAnimationCurrentIndex[i] = streamAnimationStartIndex[i];                } else {                    streamAnimationCurrentIndex[i] += nextIndex[i];                }            }            i++;            if (i > streamAnimationIndices.length) {                i = 0;            }        }        init();        $(".credits-button-img").click(function () {            global.sm.consumeEvent(global.sm.goto.POPUP);            var options = {                width: SCREEN.width / 2,                height: SCREEN.height / 2,                title: "About PE/WI"            };            global.popup = new ModalView(options);            global.popup.append('<p>People in Ecosystems/Watershed Integration (PE/WI) is a simple learning tool designed to provide a scientific platform for teaching, discussing, and evaluating the trade-offs associated with agricultural land-use and management.</p>');            global.popup.append('<p><strong>Project Team</strong></p>');            global.popup.append('<p>Lisa Schulte Moore, Carrie Chennault, Ryan Frahm, Laura Roy, John Tyndall, & John VanDyk<br />Iowa State University, Department of Natural Resource Ecology & Management</p>');            global.popup.append('<p><strong>Acknowledgements</strong></p>');            global.popup.append('<p>The development of PE/WI was supported by grants from the McKnight Foundation and US Forest Service Northern Research Station.  We would also like to thank Cindy Cambardella, Justin Choe, Diane Debinski, Emily Heaton, Matt Helmers, Tom Isenhart, Matt Liebman, John VanDyk, members of the ISU Landscape Ecology & Sustainable Ecosystem Management lab,  and the Natural Capital Project for contributions to PE/WIs development and review.</p>');            global.popup.append('<p>For more information: <a href="http://www.nrem.iastate.edu/landscape/content/pewi" target="_newtab">Click Here</a></p>');            global.popup.append('<p>Links to PE/WI lesson plans: <a href="https://www.nrem.iastate.edu/landscape/files/Schulte%20et%20al.%20PEWI%20Exercises.pdf" target="_newtab">Click Here</a></p>');            global.popup.display();        });        // Variable that will determine which paint color/ image to be used based on assigned number.  It gets its number from the selected paintIndex and uses that index to change the value of an element in the grid array.        var selectedPaint; // 16 is a test number that is the default when loaded so that no painting can be done without a selection.        var plot = null;        var numberOfPaintsSelected = 0;        $("#workspace").css("height", SCREEN.height);        // ------------------------------------Map Interaction-------------------------------------------------//        function updateTable(object, selector) {//            initCalcs();//            var data = object.data;//            //console.log(data);//            for (var i = 0; i <= data.length; i++) {//                //console.log(landCoverGrid[i]);//                setStrategicWetland(i);//                setStreamNetworkArea(i);//                if (data[i] !== undefined) {//                    if (data[i] != 0) {//                        setLandCoverArea(data[i]);//                        setSubwatershedArea(i);//                    }//                    if (data[i] === 0) {//                        streamAnimationIndices.push(i);//                        $(selector).eq(i).css("background", colorsForLandCoverGrid[data[i]]);//                        //$("#watershed td").eq(i).text("0");//                    }//                    else {//                        if (data[i] === 6 || data[i] === 7 || data[i] === 8) {//                            var r = Math.floor(Math.random() * 2);//                            $(selector).eq(i).css("background", urlBuilder(picsForLandCoverGrid[data[i]][r]))//                                .css("background-size", "100%");//                        } else {//                            try {//                                $(selector).eq(i).css("background", urlBuilder(picsForLandCoverGrid[data[i]]))//                                    .css("background-size", "100%");//                            } catch (e) {//                                console.log(data[i]);//                            }//                        }//                    }//                }//            }//            global.subwatershedArea = true;//            //console.log(streamAnimationIndices)//        }        $("#popup-overlay").click(function () {            closeAllRemovableDisplays();            global.sm.consumeEvent(global.sm.goto.MAIN);        });        /********************************************************************************         / Toolbar         /*******************************************************************************///        function displayFadeInfoBox(text) {//            $("#info").text(text);//            $("#infobox").show();//            setTimeout(function () {//                $("#infobox").fadeToggle("slow", function () {//                });//            }, 3000);//        }        function displayPopup(selector, display) {            if ($(selector).is(":visible") == false) {                $(".popup-tab").hide();                $(".popup-window").hide();                $(selector).show();            }            else {                $(selector).hide();            }        }        function hidePopup() {            if ($(".popup-tab").is(":visible") == true) {                $(".popup-tab").toggle();            }        }        function clearOtherPopups(popup) {            if (popup != 2 && $("#popup-layers").is(":visible")) {                $("#popup-layers").hide();            }            if (popup != 3 && $("#scoreBox").is(":visible")) {                $("#scoreBox").hide();            }            if (popup != 4 && $("#improveBox").is(":visible")) {                $("#improveBox").hide();            }            if (popup != 5 && $("#optionsBox").is(":visible")) {                //displayPopup($("#optionsBox"),false);                $("#optionsBox").hide();            }            if (popup != 6 && $("#fact-sheet").is(":visible")) {                $("#fact-sheet").hide();            }        }        function urlBuilder(file) {            var path = "url(images/cell_images_bitmaps/" + file + ")";            return path;        }        /*         * Events         */// --------------------------------------------------------// ---------------- Click Events --------------------------        $(".watershed-rect").click(function () {            if (global.selectedPaint) {                var $id = $("#" + $(this).attr("id"));                var $image = $($id.prev().children().children());                var id = "#" + $image.attr("id");                if (global.selectedPaint > 5 && global.selectedPaint < 9) {                    var r = Math.floor(Math.random() * 2);                    d3.select(id)                        .attr("xlink:href", "images/cell_images_bitmaps/" + picsForLandCoverGrid[global.selectedPaint][r]);                } else if (global.selectedPaint > 0) {                    d3.select(id)                        .attr("xlink:href", "images/cell_images_bitmaps/" + picsForLandCoverGrid[global.selectedPaint]);                }                var index = parseInt($id.attr("id"));                changeBaselandcoverDataPoint(global.selectedPaint, index, false);                var undoData = [                    {paint: global.selectedPaint, index: index}                ];                addToUndoPath(undoData);            }        });        var oldi;        $("#landcover-toolbar ul li img").click(function () {            //$(this).toggleClass("highlighted");            var i = $("#landcover-toolbar ul li img").index(this);            //console.log(this);            $("#landcover-toolbar input").eq(i).attr("checked", true);            $("#landcover-toolbar ul li img").eq(i).toggleClass("highlighted");            selectedPaint = $("#landcover-toolbar ul li input").eq(i).attr("value");            global.selectedPaint = selectedPaint;            if (oldi != undefined) {                $("#landcover-toolbar input").eq(oldi).attr("checked", false);                $("#landcover-toolbar ul li img").eq(oldi).toggleClass("highlighted");            }            oldi = i;            updatePaintSelection();        });        $(".rounds ul li label").click(function () {            var year = parseInt($(this).prev().val());            if (year - global.year === 1 && global.data[year] === 0) {                // Create a new year                global.landuse[global.year] = landCoverArea;                global.previousyear = global.year;                global.year = year;                if (global.data[global.year] == 0) {                    newYear();                }                global.sm.consumeEvent(global.sm.goto.NEXTYEAR);                /*var r = confirm("Preparing to advance to next year..\nThe watershed will continue from where you have left off.\nClick OK to advance to year " + year + ", or click Cancel to return to editing the current year.");                 if(r)                 {                 global.year = year;                 if(global.data[global.year] === 0) {                 newYear();                 }                 global.sm.consumeEvent('goto-nextyear');                 } else {                 }                 */            } else if (global.data[year] != 0 && year != global.year) {                // Move to a already edited year                global.year = year;                global.sm.consumeEvent(global.sm.goto.NEXTYEAR);            } else if ((year - global.year) > 1) {                alert("Cannot skip a year of simulation. Try editing year " + (global.year + 1) + " before moving on.");            } else if (year === global.year) {                //alert("You are editing this year already!");            } else {                // Go to previous years                global.year = year;                previousYear();                global.sm.consumeEvent(global.sm.goto.NEXTYEAR);                /*var r = confirm("Move back to year " + year + "?");                 if(r)                 {                 global.year = year;                 previousYear();                 global.sm.consumeEvent('goto-nextyear');                 } else {                 }                 */            }        });        function newYear() {            global.data[global.year] = copy(global.data[global.year - 1]);        }        /*var ident = null;         $(".tabs ul a").click(function () {         if (ident == $(this)) {         alert("Equal!");         }         if (ident != null) {         $(ident).css("border-top", "0");         }         ident = $(this);         $(this).css("border-top", "2px solid #cccc00");         });         $("#tb-layers").click(function () {         global.sm.consumeEvent("goto-mainevent");         $("#popup-layers").toggle();         });         */        $("#sidebar-right #score").click(function () {            //console.log(dataset);            //d3.select("#output-score-svg").remove();            if ($("#layer-puck-container").is(":visible")) {                $("#layer-puck-container").hide();                d3.select("#pfeature").remove();            }            if ($("#scoreBox").is(":visible")) {                global.sm.consumeEvent(global.sm.goto.MAIN);            } else {                global.sm.consumeEvent(global.sm.goto.POPUP);                clearOtherPopups(3);                //console.log(global.update);                if (global.update) {                    global.scoreDirector = new ScoreDirector();                    global.scoreDirector.update();                }                global.plot.rounds = global.year;                var options = {                    title: "Land Use Outputs",                    width: 880                };                global.popup = new ModalView(options);                global.popup.append('<div id="bubble" class="plot"></div>');                global.popup.display();                if (global.plot) {                    global.plot.update();                }            }        });        $("#sidebar-right #improve").click(function () {            var id = $("#improveBox");            if ($("#improveBox").is(":visible") == false) {                global.sm.consumeEvent(global.sm.goto.POPUP);//        $("#improveBox").show("slide", {direction: "right"}, 500);                $("#popup-overlay").show();                clearOtherPopups(4);                global.scoreDirector = new ScoreDirector();                global.scoreDirector.calculateOutputMapValues();                var options = {                    title: "Identifying Areas for Improvement"                };                global.popup = new ModalView(options);                global.popup.append('<section class="output-map-container"><div><a>Nitrate Watershed Percent Contribution</a></div><div id="nitrate-output-map" class="output-map"><div id="watershed-percent-stat"><a></a></div></div></section><section class="output-map-container"><div><a>Gross Erosion</a></div><div id="erosion-output-map" class="output-map"><div id="erosion-stat"><a></a></div></div></section><section class="output-map-container"><div><a>Phosphorus Index Risk Assessment</a></div><div id="risk-assessment-output-map" class="output-map"><div id="risk-assessment-stat"><a></a></div></div></section>');                global.popup.display();                var opts = {                    scale: 3,                    height: 250,                    width: 350                };                global.outputmap = new OutputMap(opts);                global.outputmap.draw();            }            else {                global.sm.consumeEvent(global.sm.goto.MAIN);            }        });        $("#sidebar-right #facts").click(function () {            if ($("#fact-sheet").is(":visible")) {                $("#fact-sheet").hide();                $("#popup-overlay").hide();                global.sm.consumeEvent(global.sm.goto.MAIN);            } else {                //global.sm.consumeEvent('goto-print');                global.landuse[global.year] = landCoverArea;                clearOtherPopups(6);                global.scoreDirector = new ScoreDirector();                global.scoreDirector.update();                var print = new PrintView();                $("#fact-sheet").show("slide", {direction: "right"}, 500);                global.sm.consumeEvent(global.sm.goto.POPUP);            }        });        $(".popup-window section img").click(function () {            global.sm.consumeEvent(global.sm.goto.MAIN);        });        $("#workspace").click(function () {            if ($("#popup-layers").is(":visible")) {                $("#popup-layers").hide();            }            if ($("#layer-puck-container").is(":visible")) {                $("#layer-puck-container").hide();                d3.select("#pfeature").remove();            }        });        $("#optionsBox ul li a").click(function () {            window.print();        });        $("#sidebar-left #landcover").click(function () {            $("#landcover-toolbar").toggle();            if (!$("#landcover-toolbar").is(":visible")) {                $("#sidebar-left #landcover img").attr("src", "images/icons/white-r.png");            } else {                $("#sidebar-left #landcover img").attr("src", "images/icons/white-l.png");            }        });        $("#sidebar-left #layer").click(function (e) {            var offset = $(this).offset();            var coords = {                x: e.pageX - this.offsetLeft,                y: e.pageY - this.offsetTop            };            $("#layer-puck-container").css("left", offset.left);            togglePuk("layer", coords);        });        $(".close").click(function () {            alert();            d3.select(this).remove();        });        function closeAllRemovableDisplays() {            $(".removable-displays-container").each(function () {                $(this).remove();            });            d3.selectAll(".removable-displays").remove();        }        $("#zoom-fit").click(function () {            var tblwidth = parseFloat(SCREEN.width);            var tblheight = parseFloat(SCREEN.height);            var td = $("#watershed td");            if (tblheight < 500) {                td.css("width", "9px").css("height", "6px");            } else if (tblheight >= 500 && tblheight < 800) {                td.css("width", "18px").css("height", "12px");            } else if (tblheight >= 800 && tblheight < 1024) {                td.css("width", "24px").css("height", "16px");            } else if (tblheight >= 1024) {                td.css("width", "30px").css("height", "20px");            }            centerElement($(window), $("#watershed"));        });        var keys = {            82: false,            17: false,            85: false,            80: false,            37: false,            39: false        };        document.addEventListener("keyup", function (e) {            if (e.keyCode == 82) {                keys[82] = true;            } else if (e.keyCode == 16) {                keys[16] = true;            } else if (e.keyCode == 85) {                keys[85] = true;            } else if (e.keyCode == 80) {                keys[80] = true;            }            if (keys[82] == true && keys[16] == true) {                var undoData = [];                global.update = true;                data = global.data[global.year].baselandcover.data;                for (var i = 0; i < data.length; i++) {                    if (data[i] != undefined && data[i] != 0) {                        undoData.push({paint: data[i], index: i});                        var r = Math.round((Math.random() * 14) + 1);                        data[i] = r;                        if (data[i] === 6 || data[i] === 7 || data[i] === 8) {                            var r = Math.floor(Math.random() * 2);                            $("#watershed td").eq(i).css("background", urlBuilder(picsForLandCoverGrid[data[i]][r]))                                .css("background-size", "100%");                        } else {                            try {                                $("#watershed td").eq(i).css("background", urlBuilder(picsForLandCoverGrid[data[i]]))                                    .css("background-size", "100%");                            } catch (e) {//                                console.log(data[i]);                            }                        }                    }                }                addToUndoPath(undoData);                falsifyAll();            } else if (keys[85] == true && keys[16] == true) {                undo();                falsifyAll();            }            else if (keys[80] == true) { // P key for precipitation                if($("#edit-precipitation-container").length < 1) {                    var container = d3.select("#divcontainer")                        .append("div")                        .attr("id", "edit-precipitation-container")                        .append("div")                        .append("a")                        .text("Edit Precipitation");                    container.append("div")                        .attr("id", "edit-precipitation-body");                    for(var year in global.precipitation) {                        var row = container.append("row")                            .attr("class", "edit-precipitation-row");                        row.append("a")                            .text("Year " + year + ": ");                        var select = row.append("select");                        for(var i=0; i < 7; i++) {                            var option = select.append("option")                                .attr("value", getPrecipitationValue(i))                                .text(getPrecipitationValue(i));                            if(global.precipitation[year] == getPrecipitationValue(i)) {                                option.attr("selected", "selected");                            }                        }                    }                    var footer = container.append("div")                        .attr("id", "edit-precipitation-footer");                    footer.append("input")                        .attr("type", "button")                        .attr("value", "update")                        .attr("id", "edit-precipitation-button");                    $("#edit-precipitation-button").click(function() {                        var i = 0;                        $(".edit-precipitation-row").each(function() {                            var $select = $(this).find("select");                            setPrecipitation(i, parseFloat($select.val()));                            i++;                        });                        d3.select("#edit-precipitation-container").remove();                        updatePrecipitationHud();                    });                } else {                    d3.select("#edit-precipitation-container").remove();                }                falsifyAll();            }            function falsifyAll() {                for(var key in keys) {                    keys[key] = false;                }            }        });        document.addEventListener("keyup", function (e) {            if (e.keyCode == 82) {                keys[82] = false;            } else if (e.keyCode == 17) {                keys[17] = false;            }        });        $("#fact-sheet #close").click(function () {            $("#fact-sheet").hide("slide", {direction: "right"}, 500);            $("#popup-overlay").hide();            d3.select("#percent-landcover>div").remove();            d3.select("#precipitation-placeholder>div").remove();            d3.select("#landuse-outputs>div").remove();            d3.select("#stats>div").remove();            //global.sm.consumeEvent('goto-mainevent');        });        // --------------------------------------------------------        // ---------------- Hover Events --------------------------        $("#rounds ul li").hover(            function () {                var par = $(this).attr("id");                var $selector = $("#" + par + ">label");                updateYearHelperHud($("#" + par + ">input"));                $("#year-help").show();                $selector.css("width", "30px");                $("#rounds ul li:not(" + par + ")").css("width", "20px");            },            function () {                $("#rounds ul li label").css("width", "20px");                $("#year-help").hide();            }        );        $("#toolbar ul a").hover(            function () {                $(this).css("background", "#666666");            },            function () {                $(this).css("background", "#353030");            });        //$(".ia").hover(//             function (e) {//                 console.log(e);//                 /*var help = setTimeout(//                  function() {//                  alert();//                  $("#summary-help").show();//                  },1000);//                  *///             },//             function () {//                 $("#summary-help").hide();//             }//         );        // --------------------------------------------------------        // ------------ jQuery UI Selectable Events ---------------        $("#watershed1").selectable({            filter: ".watershed-rect",            start: function () {                //clearOtherPopups(0);                global.update = true;            },            stop: function () {                var undoData = [];                if ($(this).selectable("option", "disabled") == true) {                    return;                }                if (selectedPaint == null) {                    alert("Select a land cover option!");                    return;                }                var $selectHelper = $(".ui-selectable-helper"),                    handler = {                        position: $selectHelper.position(),                        width: parseInt($selectHelper.width()),                        height: parseInt($selectHelper.height())                    },                    hits = new Array();                handler.position.left = parseInt(handler.position.left) - parseInt($("#watershed1").css("marginLeft"));                handler.position.top = parseInt(handler.position.top) - parseInt($("#watershed1").css("marginTop"));                $(".watershed-rect").each(function () {                    var rect = {                            position: {                                left: parseInt($(this).attr("x")),                                top: parseInt($(this).attr("y"))                            },                            width: parseInt($(this).attr("width")),                            height: parseInt($(this).attr("height"))                        };                    if((rect.position.left - handler.position.left < 0 && (rect.position.left + rect.width) - handler.position.left > 0)                        || (rect.position.left - (handler.position.left + handler.width) < 0 && (rect.position.left + rect.width) - (handler.position.left + handler.width) > 0)                        || (rect.position.left - handler.position.left > 0 && (rect.position.left + rect.width) - (handler.position.left + handler.width) < 0)) {                        if((rect.position.top - handler.position.top < 0 && (rect.position.top + rect.height) - handler.position.top > 0)                            || (rect.position.top - (handler.position.top + handler.height) < 0 && (rect.position.top + rect.height) - (handler.position.top + handler.height) > 0)) {                            var $image = $(this).parent().find("defs").find("pattern").find("image");//                            console.log($pattern);                            $image[0].setAttribute("href", "images/cell_images_bitmaps/" + global.maps.setIcon(global.selectedPaint))                            changeBaselandcoverDataPoint(global.selectedPaint, parseInt($(this).attr("id")), false);                        } else if((rect.position.top - handler.position.top > 0 && (rect.position.top + rect.height) - (handler.position.top + handler.height) < 0)) {                            var $image = $(this).parent().find("defs").find("pattern").find("image");//                            console.log($pattern);                            $image[0].setAttribute("href", "images/cell_images_bitmaps/" + global.maps.setIcon(global.selectedPaint))                            changeBaselandcoverDataPoint(global.selectedPaint, parseInt($(this).attr("id")), false);                        }                    } //else if((rect.position.left - handler.position.left < 0 ))//                    if((rect.position.left - handler.position.left < 0 && rect.position.left - (handler.position.left + handler.width) < 0 && (rect.position.left + rect.width) - handler.position.left > 0)//                    || (rect.position.left - handler.position.left > 0 && rect.position.left - (handler.position.left + handler.width) < 0)) {//                        if((rect.position.top - handler.position.top < 0 && rect.position.top - (handler.position.top + handler.height) < 0)//                        || (rect.position.top - handler.position.top > 0 && rect.position.top - (handler.position.top + handler.height) < 0)) {//////                        }//                    }//                    if(((rect.position.left - handler.position.left > 0 && rect.position.left - (handler.position.left + handler.width) < 0)//                        || ((rect.position.left + rect.width) - handler.position.left > 0 && (rect.position.left + rect.width) - (handler.position.left + handler.width) < 0))) {//                        if((rect.position.top - handler.position.top > 0 && rect.position.top - (handler.position.top + handler.height) < 0)//                            || ((rect.position.top + rect.height) - handler.position.top >0 && (rect.position.top + rect.height) - (handler.position.top + handler.height) < 0)) {//                            hits.push($(this));//                        }//                    }                });//                $(".ui-selected").each(function () {//                    console.log("Here");//                    var $id = $("#" + $(this).attr("id"));//                    var $image = $($id.prev().children().children());//                    var id = "#" + $image.attr("id");//                    if (global.selectedPaint > 5 && global.selectedPaint < 9) {//                        var r = Math.floor(Math.random() * 2);//                        d3.select(id)//                            .attr("xlink:href", "images/cell_images_bitmaps/" + picsForLandCoverGrid[global.selectedPaint][r]);//                    } else if (global.selectedPaint > 0) {//                        d3.select(id)//                            .attr("xlink:href", "images/cell_images_bitmaps/" + picsForLandCoverGrid[global.selectedPaint]);//                    }////                    var index = parseInt($id.attr("id"));//                    changeBaselandcoverDataPoint(global.selectedPaint, index, false);//                    var undoData = [//                        {paint: global.selectedPaint, index: index}//                    ];//                    addToUndoPath(undoData);//                    var index = $("#watershed td").index(this),//                        landcover = global.data[global.year].baselandcover.data;//                    if (landcover[index] !== null) {//                        setLandCoverArea[landcover[index]];//                    }//                    if (landcover[index] != 0 && landcover[index] != undefined) {//                        if (selectedPaint != null) {//                            undoData.push({paint: landcover[index], index: index});//                            var paint = parseInt(selectedPaint);//                            if (paint === 6 || paint === 7 || paint === 8) {//                                var r = Math.floor(Math.random() * 2);//                                $(this).css("background", urlBuilder(picsForLandCoverGrid[paint][r])).css("background-size", "100%");//                            } else {//                                $(this).css("background", urlBuilder(picsForLandCoverGrid[paint])).css("background-size", "100%");//                            }//                            changeBaselandcoverDataPoint(paint, index, false);//                        }//                    }////                });                addToUndoPath(undoData);                //$(".ui-selected").removeClass(".ui-selected");                plot = null;            }        }).selectable("option", "distance", 20);        function addToUndoPath(arr) {            global.undo.push(arr);        }        function undo() {            if (global.undo[0] == undefined) return;            var lastAction = global.undo.pop();            for (var i = 0; i < lastAction.length; i++) {                if (lastAction[i].paint > 5 && lastAction[i].paint < 9) {                    var r = Math.floor(Math.random() * 2);                    $("#watershed td").eq(lastAction[i].index).css("background", urlBuilder(picsForLandCoverGrid[lastAction[i].paint][r]))                        .css("background-size", "100%");                } else {                    $("#watershed td").eq(lastAction[i].index).css("background", urlBuilder(picsForLandCoverGrid[lastAction[i].paint])).css("background-size", "100%");                }                global.data[global.year].baselandcover.data[lastAction[i].index] = lastAction[i].paint;            }        }        // --------------------------------------------------------        // ---------------- Mouse Wheel Events --------------------        var mytable = document.getElementById("workspace");        if (mytable.addEventListener) {            // IE9, Chrome, Safari, Opera            //mytable.addEventListener("mousewheel", MouseWheelHandler, false);            // Firefox            //mytable.addEventListener("DOMMouseScroll", MouseWheelHandler, false);        }        // IE 6/7/8        //else mytable.attachEvent("onmousewheel", MouseWheelHandler);        function MouseWheelHandler(e) {            //console.log(e.srcElement);            //console.log($("#watershed td"));            //cross-browser wheel delta            //var a = window.event || e; // Old IE support            //var delta = Math.max(-1, Math.min(1, (a.wheelDelta || -a.detail)));            var rectSelector = $(".watershed-rect"),                mousex = e.pageX - $(window).scrollLeft(),                mousey = e.pageY - $(window).scrollTop(),                wheel = e.wheelDelta / 120,                tblwidth = parseFloat($("#watershed1").attr("width")),                tblheight = parseFloat($("#watershed1").attr("height")),                width = parseFloat(rectSelector.attr("width")),                height = parseFloat(rectSelector.attr("height"));            console.log(mousex, mousey);            console.log(wheel);            console.log(tblwidth, tblheight);            console.log(width, height);            //console.log(width + ", " + height);            //console.log(e.wheelDelta);            width += Math.floor(wheel * 3);            height += Math.floor(wheel * 2);            if (width * 23 / 2 <= window.innerWidth) {                //$("#watershed1").attr("width",width * global.data[global.year].columns).attr("height",height * global.data[global.year].rows);                // Store the table's new dimensions                var newtblwidth = width * global.data[global.year].columns;                var newtblheight = height * global.data[global.year].rows;                $("#watershed1").attr("width", newtblwidth).attr("height", newtblheight);                rectSelector.attr("width", width).attr("height", height);                for (var i = 0; i < rectSelector.length; i++) {                    console.log(Math.floor(wheel * 30));                    var x = parseFloat(rectSelector.eq(i).attr("x")) + Math.floor(wheel * 30),                        y = parseFloat(rectSelector.eq(i).attr("y")) + Math.floor(wheel * 20);                    console.log(x);                    rectSelector.eq(i).attr("x", x).attr("y", y);                }                // Get the table's center relative to itself                var left = parseFloat($("#watershed1").css("marginLeft"));                var top = parseFloat($("#watershed1").css("marginTop"));                var centerx = (tblwidth / 2) - left;                var centery = (tblheight / 2) - top;                // Get the mouse position relative to the table                var relmousex = mousex - left;                var relmousey = mousey - top;                // Get the difference in dimensions between the new and old table                var diffwidth = newtblwidth - tblwidth;                var diffheight = newtblheight - tblheight;                console.log("Table Margin Left: " + left, "Table Margin Top: " + top);                console.log(relmousex, relmousey);                console.log(diffwidth, diffheight);                // Get the ratio to move the table left/up                // If the mouse is located on the right edge of the table the ratio will                // be 1, and the full difference in width between the previous and current                // table widths will be subtracted from the left border. If the mouse is                // located on the left edge of the table, the ratio will be 0, and the                // position of the table will not be moved. Same concept for the top                // border.                var marginleft = left - ((relmousex / tblwidth) * diffwidth);                var margintop = top - ((relmousey / tblheight) * diffheight);                // Apply the new margins to the table                console.log(marginleft, margintop);                $("#watershed1").css("margin-left", marginleft).css("margin-top", margintop);            }            return false;        }        function moveMapRectPosition(diffx, diffy) {        }        // --------------------------------------------------------        // ---------------- Mouse Move Events ---------------------        var oldmousex = 0, oldmousey = 0;        $(document).on("mousemove", "#workspace", function (e) {            if (e.which == 2) {                $("#workspace").css("cursor", "move");                $("#watershed-rect").css("cursor", "move");                var newmousex = e.pageX - $(window).scrollLeft();                var newmousey = e.pageY - $(window).scrollTop();                var left = parseFloat($("#watershed1").css("marginLeft"));                var top = parseFloat($("#watershed1").css("marginTop"));                if (oldmousex > 0 && oldmousey > 0) {                    var diffx = (newmousex - left) - (oldmousex - left);                    var diffy = (newmousey - top) - (oldmousey - top);                    left = left + diffx;                    top = top + diffy;                }                $("#watershed1").css("marginLeft", left);                $("#watershed1").css("marginTop", top);                oldmousex = newmousex;                oldmousey = newmousey;            }            else {                $("#workspace").css("cursor", "default");                $("#watershed-rect").css("cursor", "pointer");            }        });        // --------------------------------------------------------        // ---------------- Mouse Up Events -----------------------        document.addEventListener("contextmenu", function (e) {            e.preventDefault();        }, false);//        $("#workspace")//            .mouseup(function (e) {//                if (e.which == 2) {//                    oldmousex = 0;//                    oldmousey = 0;//                } else if (e.which == 3) {//                    var offset = $(this).offset();//                    var coords = {//                        x: e.pageX - this.offsetLeft,//                        y: e.pageY - this.offsetTop//                    };//                    togglePuk("rclick", coords);//                }//            })//*///            .mousedown(function (e) {//                if (e.which == 3) {//                    var offset = $(this).offset();//                    var coords = {//                        x: e.pageX - this.offsetLeft,//                        y: e.pageY - this.offsetTop//                    };//                    var width = parseInt($("#rclick-puk-container").width());//                    var height = parseInt($("#rclick-puk-container").height());//                    $("#rclick-puk-container").css("left", coords.x - (width / 2)).css("top", coords.y - (height / 2));//                    togglePuk("rclick", coords);//                }//            });//        $("#rclick-puk-container").mouseup(function (e) {//            if (e.which == 3) {//                var offset = $(this).offset();//                var coords = {//                    x: e.pageX - this.offsetLeft,//                    y: e.pageY - this.offsetTop//                };//                togglePuk("rclick", coords);//            }//        });////        $("*").mouseup(function (e) {//            if (e.which == 3) {//                var offset = $(this).offset();//                var coords = {//                    x: e.pageX - this.offsetLeft,//                    y: e.pageY - this.offsetTop//                };//                togglePuk("rclick", coords);//            }//        });    };    function displayLoadingLayer(selector) {        $(selector).fadeToggle("slow", function () {            global.sm.consumeEvent(global.sm.goto.MAIN);        });//        setTimeout(function () {//            $(selector).fadeToggle("slow", function () {//                global.sm.consumeEvent(global.sm.goto.MAIN);//            });//        }, 0);    }    $(window).resize(function () {        centerElement($(window), $("#watershed1"));        SCREEN.width = $(window).width();        SCREEN.height = $(window).height();        resizeBackgroundImage();    });    var landCoverPicsObject = [, , , , , , , , , , , , , , , ];    function loadLandCoverPics() {        for (var i = 1; i < landCoverPicsObject.length; i++) {            landCoverPicsObject[i] = new Image();            landCoverPicsObject[i].src = "images/cell_images/" + picsForLandCoverGrid[i];            console.log("Here");        }    }    function setBackgroundImage(selector) {        var s, winheight;        s = "100%";        winheight = (global.sm.getStatus == 'mainevent-view') ? SCREEN.height - ($("#toolbar").height() - 3) : SCREEN.height;        $(selector).css("background", "url(images/backgrounds/" + backgroundImages[global.r[global.year]] + ")").css("background-size", s + " " + winheight + "px");    }    function copyBackgroundImage(selector) {        var winheight, s;        s = "100%";        winheight = (global.sm.getStatus == 'mainevent-view') ? SCREEN.height - ($("#toolbar").height() - 3) : SCREEN.height;        $(selector).css("background", "url(images/backgrounds/" + backgroundImages[global.r[global.year]] + ")").css("background-size", s + " " + winheight + "px");    }    function resizeBackgroundImage() {        var s = "100%";        var winheight = SCREEN.height/* - ($("#toolbar").height()-3)*/;        $("body").css("background-size", s + " " + winheight + "px");    }    function hideMiniMap() {        if ($("#mini-map").is(":visible") == true) {            $("#mini-map").hide();        }    }    function populateMiniMap(data, colors, adjust) {        if (adjust) {            for (var i = 0; i < data.length; i++) {                if (data[i] != undefined) {                    $("#mini-map td").eq(i).css("background", colors[data[i] - 1]);                }            }        } else {            for (var i = 0; i < data.length; i++) {                if (data[i] != undefined) {                    $("#mini-map td").eq(i).css("background", colors[data[i]]);                }            }        }    }})(jQuery);function displayMiniMap(id) {    var selector = $("#" + id + "-mini-map");    var td = $("#" + id + "-mini-map td");    if (selector.is(":visible") == false) {        selector.show("explode");    } else {        selector.hide("explode");    }    var data,        options = {            id: id,            width: 3,            height: 2        };    global.maps.minimap(options);    centerElement($("#" + id + "-mini-map"), $("#" + id + "-mini-map table"));    //populateMiniMap(data.data,colors,adjust);}function updateHud() {    $("#year-hud a").text("Year: " + global.year);    updatePrecipitationHud();    updatePaintSelection();}function updatePrecipitationHud() {    $("#precipitation-hud a").text("Precipitation: " + getPrecipitationValuation(global.precipitation[global.year]));}function updateYearHelperHud($selector) {    $("#year-help-year").text("Year " + $selector.val());    var p = parseFloat(global.precipitation[$selector.val()]);    $("#year-help-precipitation").text("Precipitation: " + getPrecipitationValuation(p));    // Set other stats}function getPrecipitationValuation(p) {    if (p < 30.39) {        return "Dry";    } else if (p < 36.47) {        return "Normal";    } else {        return "Wet";    }}function updatePaintSelection() {    $("#current-selection-hud a").text("Current Selection: " + getCurrentSelection());}function getCurrentSelection() {    if (global.selectedPaint == undefined) {        return "None";    } else {        return landcovers[global.selectedPaint];    }}